#!/bin/ruby
require 'optparse'

# Definition of Options/Variables
@options = {}
@options[:libDir] = '.libs'
@options[:verbose] = true
@options[:dir] = Dir.pwd
@options[:javac] = ''
@options[:execute] = false
@options[:silent] = false
@options[:jar] = false
@checkedDirs = []
@librarys = ''
@manifest = ''
@allJavaFiles = ''
@execFile = ''
@depth = 0
Dir[@options[:dir] + '/' + @options[:libDir] + '/*'].each {|f| @librarys += ":#{f}" if f.match /\.jar$/}

# Option-flag parser
OptionParser.new do |opts|
  opts.banner = "BetterJavaCompile [options]"
  opts.on( '-l', '--libdir [DIR]',String , 'Choose another library directory') do |libdir|
    abort "You can't use --libdir without specifying a directory!" if libdir == nil
    @options[:libDir] = libdir
  end
  opts.on( '-v', '--verbose', 'Output more information') do
    @options[:verbose] = true
  end
  opts.on( '-q', '--quiet', 'No text except your javac errors') do
    @options[:verbose] = false
  end
  opts.on( '-d', '--directory [DIR]', String,  'The top-level directory') do |d|
    abort "You can't use --directory without specifying a directory" if d == nil
    @options[:dir] = d
  end
  opts.on( '-j', '--javacOptions [OPTSTRING]', String, 'Add custom javac options') do |jo|
    abort "You can't use --javacOptions without specifying which options to use!" if jo == nil
    @options[:javac] = jo
  end
  opts.on( '-x', '--execute [FILE]', String, 'Executes the main method in the FILE after compilation') do |f|
    abort "You need to specify which file you want to have executed" if f == nil
    @execFile = f
    @options[:execute] = true
  end
  opts.on( '-s', '--silent', 'Prevents -x from opening a terminal') do
    @options[:silent] = true
  end
  opts.on( '-t', '--terminal', 'Spawns a terminal on execution -> override -s') do
    @options[:silent] = false
  end
  opts.on( '--jar [MANIFEST]', String, 'Create a jar from manifest') do |manifest|
    abort "You need to specify a MANIFEST for creating a jar file!" if manifest == nil
    @options[:jar] = true
    @manifest = manifest
  end
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end.parse!

# Functions:

def relativize(path)
  return path.gsub(@options[:dir],'').gsub(' /',' ').gsub(':/',':')
end

def compileDir(path)
  javaFiles = ''
  Dir[path + '/*'].each do |f|
    if File::directory? f
      @depth += 1
      puts " "*(2*@depth)+"> #{f.split('/')[-1]}" if @options[:verbose]
      compileDir f
      @depth -= 1
    elsif f.match /\.java$/
      javaFiles += (f + ' ')
    elsif f.match /\.class$/
      File.delete(f)
    end
  end
  if javaFiles != ""
   puts(' '*(@depth+1)*2 + javaFiles.split(' ').map {|s| s.split('/').last}.join(' ').gsub('.java','')) if @options[:verbose]
    unless @checkedDirs == []
      `javac #{@options[:javac]} -cp ".#{@librarys + ":" + @checkedDirs.to_s.delete("[],\"").gsub(' ',':')}" -d #{@options[:dir]} #{javaFiles}`
    else
      `javac #{@options[:javac]} -cp ".#{@librarys}" -d #{@options[:dir]} #{javaFiles}`
    end
  end
  @allJavaFiles += " " + javaFiles
  @checkedDirs << path
end

# End of function definitions
puts "Starting to compile with following librarys:#{relativize(@librarys.gsub(':', ' '))}" if @options[:verbose]
puts "> #{@options[:dir].split('/')[-1]}"
compileDir @options[:dir]

if @options[:jar]
  puts "Compressing the compiled code to output.jar" if @options[:verbose]
  `jar cmf #{@manifest + ' output.jar' + relativize(@librarys.gsub(':',' ') + ' ' + @allJavaFiles + ' ' + @allJavaFiles.gsub('.java ', '.class '))}`
end

if @options[:execute]
  puts "Executing the output with classpath '.#{relativize(@librarys + ":" + @checkedDirs.join(':'))}'"
  if @options[:silent]
    `java -cp ".#{@librarys + ':' + relativize(@checkedDirs.join(':'))}" #{@execFile.gsub('.java','')}`
  else
    `$TERMINAL -e $SHELL -c "java -cp \".#{@librarys + ':' + relativize(@checkedDirs.join(':'))}\" #{@execFile.gsub('.java','')}; PS1='' sh"`
  end
end
